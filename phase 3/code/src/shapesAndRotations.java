public class shapesAndRotations {

    public int[][][][] getL(){
        int[][][][] LInt =

                {{{{1}, {1}, {1}, {1}}, {{1}, {0}, {0}, {0}}},
                {{{1, 1, 1, 1}}, {{1, 0, 0, 0}}},
                {{{1}, {1}, {1}, {1}}, {{0}, {0}, {0}, {1}}},
                {{{1, 1, 1, 1}}, {{0, 0, 0, 1}}},
                {{{1}, {0}, {0}, {0}}, {{1}, {1}, {1}, {1}}},
                {{{1, 0, 0, 0}}, {{1, 1, 1, 1}}},
                {{{0}, {0}, {0}, {1}}, {{1}, {1}, {1}, {1}}},
                {{{0, 0, 0, 1}}, {{1, 1, 1, 1}}},
                {{{1, 1}, {1, 0}, {1, 0}, {1, 0}}},
                {{{1, 0, 0, 0}, {1, 1, 1, 1}}},
                {{{0, 1}, {0, 1}, {0, 1}, {1, 1}}},
                {{{1, 1, 1, 1}, {0, 0, 0, 1}}},
                {{{1, 1}, {0, 1}, {0, 1}, {0, 1}}},
                {{{1, 1, 1, 1}, {1, 0, 0, 0}}},
                {{{1, 0}, {1, 0}, {1, 0}, {1, 1}}},
                {{{0, 0, 0, 1}, {1, 1, 1, 1}}},
                {{{1}, {0}}, {{1}, {0}}, {{1}, {0}}, {{1}, {1}}},
                {{{1, 0}}, {{1, 0}}, {{1, 0}}, {{1, 1}}},
                {{{0}, {1}}, {{0}, {1}}, {{0}, {1}}, {{1}, {1}}},
                {{{0, 1}}, {{0, 1}}, {{0, 1}}, {{1, 1}}},
                {{{1}, {1}}, {{1}, {0}}, {{1}, {0}}, {{1}, {0}}},
                {{{1, 1}}, {{1, 0}}, {{1, 0}}, {{1, 0}}},
                {{{1}, {1}}, {{0}, {1}}, {{0}, {1}}, {{0}, {1}}},
                {{{1, 1}}, {{0, 1}}, {{0, 1}}, {{0, 1}}}};

        return LInt;
    }

    public int[][][][] getP(){
        int[][][][] PInt =

                {{{{2, 2}, {2, 2}, {2, 0}}},
                {{{2, 2, 0}, {2, 2, 2}}},
                {{{0, 2}, {2, 2}, {2, 2}}},
                {{{2, 2, 2}, {0, 2, 2}}},
                {{{2, 2}, {2, 2}, {0, 2}}},
                {{{2, 2, 2}, {2, 2, 0}}},
                {{{2, 0}, {2, 2}, {2, 2}}},
                {{{0, 2, 2}, {2, 2, 2}}},
                {{{2}, {2}, {0}}, {{2}, {2}, {2}}},
                {{{2, 2, 0}}, {{2, 2, 2}}},
                {{{0}, {2}, {2}}, {{2}, {2}, {2}}},
                {{{0, 2, 2}}, {{2, 2, 2}}},
                {{{2}, {2}, {2}}, {{2}, {2}, {0}}},
                {{{2, 2, 2}}, {{2, 2, 0}}},
                {{{2}, {2}, {2}}, {{0}, {2}, {2}}},
                {{{2, 2, 2}}, {{0, 2, 2}}},
                {{{2}, {0}}, {{2}, {2}}, {{2}, {2}}},
                {{{2, 0}}, {{2, 2}}, {{2, 2}}},
                {{{0}, {2}}, {{2}, {2}}, {{2}, {2}}},
                {{{0, 2}}, {{2, 2}}, {{2, 2}}},
                {{{2}, {2}}, {{2}, {2}}, {{0}, {2}}},
                {{{2, 2}}, {{2, 2}}, {{0, 2}}},
                {{{2}, {2}}, {{2}, {2}}, {{2}, {0}}},
                {{{2, 2}}, {{2, 2}}, {{2, 0}}}};

        return PInt;
    }

    public int[][][][] getT(){
        int[][][][] TInt =

            {{{{3, 3, 3}, {0, 3, 0}, {0, 3, 0}}},
            {{{3, 0, 0}, {3, 3, 3}, {3, 0, 0}}},
            {{{0, 3, 0}, {0, 3, 0}, {3, 3, 3}}},
            {{{0, 0, 3}, {3, 3, 3}, {0, 0, 3}}},
            {{{3}, {0}, {0}}, {{3}, {3}, {3}}, {{3}, {0}, {0}}},
            {{{3, 0, 0}}, {{3, 3, 3}}, {{3, 0, 0}}},
            {{{0}, {0}, {3}}, {{3}, {3}, {3}}, {{0}, {0}, {3}}},
            {{{0, 0, 3}}, {{3, 3, 3}}, {{0, 0, 3}}},
            {{{0}, {3}, {0}}, {{0}, {3}, {0}}, {{3}, {3}, {3}}},
            {{{0, 3, 0}}, {{0, 3, 0}}, {{3, 3, 3}}},
            {{{3}, {3}, {3}}, {{0}, {3}, {0}}, {{0}, {3}, {0}}},
            {{{3, 3, 3}}, {{0, 3, 0}}, {{0, 3, 0}}}};

        return TInt;
    }

    public int[][][][] getA(){
        int[][][][] AInt =

                {{{{1,1,1,1},{1,1,1,1}},{{1,1,1,1},{1,1,1,1}}},
                {{{1,1},{1,1},{1,1},{1,1}},{{1,1},{1,1},{1,1},{1,1}}},
                {{{1,1},{1,1}},{{1,1},{1,1}},{{1,1},{1,1}},{{1,1},{1,1}}}};

        return AInt;
    }

    public int[][][][] getB(){
        int[][][][] BInt =

                {{{{2,2,2,2},{2,2,2,2},{2,2,2,2}},{{2,2,2,2},{2,2,2,2},{2,2,2,2}}},
                {{{2,2,2},{2,2,2},{2,2,2},{2,2,2}},{{2,2,2},{2,2,2},{2,2,2},{2,2,2}}},
                {{{2,2},{2,2},{2,2}},{{2,2},{2,2},{2,2}},{{2,2},{2,2},{2,2}},{{2,2},{2,2},{2,2}}},
                {{{2,2,2,2},{2,2,2,2}},{{2,2,2,2},{2,2,2,2}},{{2,2,2,2},{2,2,2,2}}},
                {{{2,2,2},{2,2,2}},{{2,2,2},{2,2,2}},{{2,2,2},{2,2,2}},{{2,2,2},{2,2,2}}},
                {{{2,2},{2,2},{2,2},{2,2}},{{2,2},{2,2},{2,2},{2,2}},{{2,2},{2,2},{2,2},{2,2}}}};

        return BInt;
    }

    public int[][][][] getC(){
        int[][][][] CInt =

                {{{{3,3,3},{3,3,3},{3,3,3}},{{3,3,3},{3,3,3},{3,3,3}},{{3,3,3},{3,3,3},{3,3,3}}}};

        return CInt;
    }

    public boolean[][][][] getTBoolean(){
        return getBoolean(getT());
    }

    public boolean[][][][] getPBoolean(){
        return getBoolean(getP());
    }

    public boolean[][][][] getLBoolean(){
        return getBoolean(getL());
    }

    public boolean[][][][] getABoolean(){
        return getBoolean(getA());
    }

    public boolean[][][][] getBBoolean(){
        return getBoolean(getB());
    }

    public boolean[][][][] getCBoolean(){
        return getBoolean(getC());
    }

    public boolean[][][][] getBoolean(int[][][][] type){
        boolean[][][][] Boolean = new boolean[type.length][type[0].length][type[0][0].length][type[0][0][0].length];

        for(int shape=0; shape<type.length; shape++){
            for(int z=0; z<type[0].length; z++){
                for(int y=0; y<type[0][0].length; y++){
                    for(int x=0; x<type[0][0][0].length; x++){
                        if(type[shape][z][y][x] > 0){
                            Boolean[shape][z][y][x] = true;
                        } else {
                            Boolean[shape][z][y][x] = false;
                        }
                    }
                }
            }
        }

        return Boolean;
    }
    
}
